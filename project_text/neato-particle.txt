1. Project Title & Summary
Neato Particle Filter
Implemented a particle filter using Python and ROS2 to accurately localize a Neato robot on a known map by fusing odometry data and LIDAR scans.

2. Key Achievements (3 Numerical/Notable Metrics)
Robust Localization: Demonstrated reliable tracking of the robot’s position with a converged particle cloud in diverse map areas.
Dynamic Resampling: Weights and positions of particles updated in real time, maintaining ~90% alignment between expected and actual laser scans after filter convergence (rough estimate based on visuals).
Quick Filter Reset: Implemented “re-initialization” in Rviz, reducing recovery time when the filter drifted or encountered gross sensor noise.
3. Problem Statement
Odometry alone can drift significantly due to sensor noise and wheel slip, causing inaccuracies in a robot’s position estimate. A particle filter was employed to combine odometry and LIDAR sensor data for more precise, real-time localization in a 2D map.

4. Role & Responsibilities
Particle Initialization: Deployed a randomly distributed cloud of particles representing possible robot poses in the map frame.
Weighting Mechanism: Calculated the likelihood of each particle by comparing simulated laser scans against real scans.
Resampling & Convergence: Ensured that high-weight particles spawned more progeny in subsequent iterations, guiding the cloud toward the true pose.
Filter Maintenance: Incorporated a “reset” method to update the filter’s guess if it strayed too far from reality (via Rviz initial poses).
5. Tools & Technologies Used
ROS2: Managed sensor data (LIDAR in `/scan`), odometry (`/odom`), and transform frames (map, odom, base_link).
Python: Main language for implementing the particle filter logic (initialization, weighting, resampling).
Gazebo & Rviz: Used for simulation (position ground truth) and visualization (map alignment, particle cloud, reset arrows).
6. Challenges & Solutions
Sensor Noise & Drift: Pure odometry would accumulate large errors.
Solution: Particle filter continuously re-weights and resamples particles to converge on a likely pose.
Initial Pose Uncertainty: If the guess was off by a large margin, the filter struggled to converge quickly.
Solution: Added a manual reset in Rviz to reinitialize the filter when strong deviation was detected.
Computational Overhead: High particle counts can slow processing.
Solution: Balanced the number of particles (e.g., 100–500) for real-time performance without sacrificing accuracy.
7. Results & Impact
Accurate Mapping: Particle filter aligned red laser scans closely with map walls (black-and-white render), demonstrating strong localization.
Adaptive Localization: System gracefully handled moderate sensor noise and odometry errors, keeping the robot’s estimated position reliably within a small error margin.
Enhanced Robot Autonomy: A stable localization foundation allows future tasks (path planning, obstacle avoidance) to execute with higher confidence in the robot’s pose.
8. Collaboration & Stakeholders
Student/Research Team: Coordinated on algorithm design, coding, and testing in simulated and physical Neato environments.
ROS & Robotics Community: Leveraged standard TF frames (map, odom, base_link) and documentation for implementing the filter.
End Users: Future projects requiring accurate localization, including multi-robot coordination or advanced SLAM solutions.
9. Key Takeaways & Learnings
Sensor Fusion: Merging odometry and LIDAR is more powerful than using either alone for localization.
Particle Filter Nuances: Proper initialization, weighting, and resampling strategies are crucial for robust, timely convergence.
Recovery Methods: Providing an on-the-fly reset can salvage localization when the filter’s confidence is compromised.
10. Future Improvements & Next Steps
Adaptive Particle Counts: Dynamically adjust the number of particles based on sensor confidence or environment complexity.
Multi-Modal Hypothesis: Investigate if multiple clusters exist (in large, symmetrical maps) and refine resampling to handle them.
Real-World Validation: Expand from simulation to physical testing on a Neato, accounting for actual wheel slip, uneven floors, and LIDAR line-of-sight issues.
Integration with SLAM: Combine particle-filter localization with online mapping for unknown or partially known environments.
